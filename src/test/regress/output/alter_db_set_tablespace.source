CREATE SCHEMA adst;
SET search_path TO adst,public;
-- Scenario 1: Where alter database set tablespace successfully changes the
-- underlying tablespace directory. In this case, we we expect that
-- the tablespace for database has changed across all the segments and all of
-- the database files have been successfully moved to the new tablespace location.
-- Set tablespace location variables
\set adst_source_tablespace_location '@testtablespace@/adst_source'
\set adst_destination_tablespace_location '@testtablespace@/adst_dest'
-- Given we create the source and destination tablespaces
\! mkdir @testtablespace@/adst_source
CREATE TABLESPACE adst_source_tablespace LOCATION :'adst_source_tablespace_location';
\! mkdir @testtablespace@/adst_dest
CREATE TABLESPACE adst_destination_tablespace LOCATION :'adst_destination_tablespace_location';
-- And we create a database in the source tablespace
CREATE DATABASE alter_db TABLESPACE adst_source_tablespace;
-- And we record the filesystem state for the database in the source tablespace
CREATE TEMPORARY TABLE before_alter AS SELECT * FROM stat_db_objects('alter_db', 'adst_source_tablespace');
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
-- And we move the database between tablespaces
ALTER DATABASE alter_db SET TABLESPACE adst_destination_tablespace;
-- Increase the likelihood that mirrors have applied the filesystem changes
SELECT give_mirrors_time_to_catch_up();
 give_mirrors_time_to_catch_up 
-------------------------------
 
(1 row)

-- Then all the files of the database should now be in the dboid directory in the target tablespace directory for all database instances.
CREATE TEMPORARY TABLE after_alter AS SELECT * FROM stat_db_objects('alter_db', 'adst_destination_tablespace');
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
(SELECT * FROM before_alter) EXCEPT (SELECT * FROM after_alter);
 dbid | relfilenode_dboid_relative_path | size 
------+---------------------------------+------
(0 rows)

-- And the dboid directory under the source tablespace directory should remain empty for all database instances.
SELECT * FROM stat_db_objects('alter_db', 'adst_source_tablespace');
NOTICE:  dboid dir for database alter_db does not exist on dbid = 1
CONTEXT:  PL/Python function "stat_db_objects"
NOTICE:  dboid dir for database alter_db does not exist on dbid = 2
CONTEXT:  PL/Python function "stat_db_objects"
NOTICE:  dboid dir for database alter_db does not exist on dbid = 3
CONTEXT:  PL/Python function "stat_db_objects"
NOTICE:  dboid dir for database alter_db does not exist on dbid = 4
CONTEXT:  PL/Python function "stat_db_objects"
NOTICE:  dboid dir for database alter_db does not exist on dbid = 5
CONTEXT:  PL/Python function "stat_db_objects"
NOTICE:  dboid dir for database alter_db does not exist on dbid = 6
CONTEXT:  PL/Python function "stat_db_objects"
NOTICE:  dboid dir for database alter_db does not exist on dbid = 7
CONTEXT:  PL/Python function "stat_db_objects"
NOTICE:  dboid dir for database alter_db does not exist on dbid = 8
CONTEXT:  PL/Python function "stat_db_objects"
 dbid | relfilenode_dboid_relative_path | size 
------+---------------------------------+------
    1 |                                 |     
    2 |                                 |     
    3 |                                 |     
    4 |                                 |     
    5 |                                 |     
    6 |                                 |     
    7 |                                 |     
    8 |                                 |     
(8 rows)

-- Cleanup
DROP DATABASE alter_db;
DROP TABLESPACE adst_source_tablespace;
DROP TABLESPACE adst_destination_tablespace;
DROP SCHEMA adst;
